/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/users/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register new account */
        post: operations["register_user_api_v1_users_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login → JWT */
        post: operations["login_for_access_token_api_v1_users_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Current user profile */
        get: operations["read_users_me_api_v1_users_me_get"];
        /** Update profile */
        put: operations["update_users_me_api_v1_users_me_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/videos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit YouTube URL (async processing)
         * @description Submit a new YouTube video for asynchronous processing.
         *
         *     Only users with the *creator* or *moderator* role are authorized.
         */
        post: operations["submit_video_api_v1_videos_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/videos/id/{video_id_path}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Processing status
         * @description Return processing status for the given video.
         *
         *     Accessible to the video owner (creator) or any moderator.
         */
        get: operations["get_video_status_api_v1_videos_id__video_id_path__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/videos/id/{video_id_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Video details
         * @description Public endpoint returning full video metadata.
         */
        get: operations["get_video_details_api_v1_videos_id__video_id_path__get"];
        /**
         * Update video details
         * @description Allow owner or moderator to update title/desc/tags.
         */
        put: operations["update_video_api_v1_videos_id__video_id_path__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/videos/id/{video_id_path}/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Record playback view
         * @description Increment a video's view count.
         *
         *     Behaviour nuances (aligned with test-suite expectations):
         *
         *     • If the video does **not exist** → 404 for everyone.
         *     • If the video exists but is **not READY**:
         *         – **Unauthenticated** callers receive 404 (video hidden).
         *         – Authenticated *viewer*-level callers receive 403.
         *         – The owner (*creator*) or any *moderator* can still access → 404 to
         *           remain consistent with current spec (not explicitly tested yet).
         *     • A READY video is public: anyone can record a view (204).
         */
        post: operations["record_view_api_v1_videos_id__video_id_path__view_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/videos/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Latest videos */
        get: operations["get_latest_videos_api_v1_videos_latest_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/videos/by-tag/{tag_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Videos by tag */
        get: operations["get_videos_by_tag_api_v1_videos_by_tag__tag_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/videos/by-uploader/{uploader_id_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Videos by uploader */
        get: operations["get_videos_by_uploader_api_v1_videos_by_uploader__uploader_id_path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/videos/id/{video_id_path}/rating": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get rating summary */
        get: operations["get_rating_summary_endpoint_api_v1_videos_id__video_id_path__rating_get"];
        put?: never;
        /** Submit rating (1-5) */
        post: operations["submit_rating_api_v1_videos_id__video_id_path__rating_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/videos/id/{video_id_path}/related": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Content-based related list
         * @description Return a list of videos related to the given video.
         *
         *     The underlying implementation is currently stubbed out and will return the
         *     latest videos (excluding the source video) with a random relevance score.
         */
        get: operations["get_related_videos_for_video_api_v1_videos_id__video_id_path__related_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/search/videos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Keyword video search */
        get: operations["search_videos_api_v1_search_videos_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/search/tags/suggest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Autocomplete tags */
        get: operations["suggest_video_tags_api_v1_search_tags_suggest_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/videos/{video_id_path}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List comments for video */
        get: operations["list_comments_video_api_v1_videos__video_id_path__comments_get"];
        put?: never;
        /**
         * Add comment to video
         * @description Endpoint for viewers to add a comment to a READY video.
         */
        post: operations["post_comment_to_video_api_v1_videos__video_id_path__comments_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{user_id_path}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List comments by user */
        get: operations["list_comments_user_api_v1_users__user_id_path__comments_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/videos/{video_id_path}/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get aggregate rating plus current user's rating (optional) */
        get: operations["get_rating_summary_video_api_v1_videos__video_id_path__ratings_get"];
        put?: never;
        /**
         * Rate a video (create or update)
         * @description Upsert a rating (1-5) for the specified video by the current viewer.
         */
        post: operations["post_rating_video_api_v1_videos__video_id_path__ratings_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/recommendations/foryou": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Personalized 'For You' video recommendations */
        get: operations["get_for_you_feed_api_v1_recommendations_foryou_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reco/ingest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ingest vector embedding for a video
         * @description Accept a vector embedding for a video (creator-only).
         */
        post: operations["ingest_embedding_api_v1_reco_ingest_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/flags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Flag content (video or comment)
         * @description Create a new flag for the specified content.
         */
        post: operations["submit_flag_api_v1_flags_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/moderation/flags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all flags (moderator inbox) */
        get: operations["list_all_flags_api_v1_moderation_flags_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/moderation/flags/{flag_id_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of a specific flag */
        get: operations["get_flag_details_api_v1_moderation_flags__flag_id_path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/moderation/flags/{flag_id_path}/action": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Take action on a specific flag */
        post: operations["act_on_flag_api_v1_moderation_flags__flag_id_path__action_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/moderation/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for users (moderator only) */
        get: operations["search_users_endpoint_api_v1_moderation_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/moderation/users/{user_id_path}/assign-moderator": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Promote user to moderator */
        post: operations["assign_moderator_endpoint_api_v1_moderation_users__user_id_path__assign_moderator_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/moderation/users/{user_id_path}/revoke-moderator": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Demote user from moderator */
        post: operations["revoke_moderator_endpoint_api_v1_moderation_users__user_id_path__revoke_moderator_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/moderation/videos/{video_id_path}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restore a soft-deleted video (stub) */
        post: operations["restore_video_endpoint_api_v1_moderation_videos__video_id_path__restore_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/moderation/comments/{comment_id_path}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restore a soft-deleted comment (stub) */
        post: operations["restore_comment_endpoint_api_v1_moderation_comments__comment_id_path__restore_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AggregateRatingResponse */
        AggregateRatingResponse: {
            /**
             * Videoid
             * Format: uuid
             */
            videoId: string;
            /** Averagerating */
            averageRating?: number | null;
            /**
             * Totalratingscount
             * @default 0
             */
            totalRatingsCount: number;
            /** Currentuserrating */
            currentUserRating?: number | null;
        };
        /**
         * CommentCreateRequest
         * @description Payload for creating a new comment.
         */
        CommentCreateRequest: {
            /** Text */
            text: string;
        };
        /**
         * CommentResponse
         * @description API response representation for a single comment.
         */
        CommentResponse: {
            /**
             * Commentid
             * Format: uuid
             */
            commentid: string;
            /**
             * Videoid
             * Format: uuid
             */
            videoid: string;
            /**
             * Userid
             * Format: uuid
             */
            userid: string;
            /** Comment */
            comment: string;
            /** Sentiment Score */
            sentiment_score?: number | null;
        };
        /** ContentRestoreResponse */
        ContentRestoreResponse: {
            /**
             * Content Id
             * Format: uuid
             */
            content_id: string;
            /** Content Type */
            content_type: string;
            /** Status Message */
            status_message: string;
        };
        /**
         * ContentTypeEnum
         * @description Possible kinds of content that can be flagged.
         * @enum {string}
         */
        ContentTypeEnum: "video" | "comment";
        /**
         * EmbeddingIngestRequest
         * @description Payload accepted by the vector‐embedding ingestion endpoint.
         */
        EmbeddingIngestRequest: {
            /**
             * Videoid
             * Format: uuid
             */
            videoId: string;
            /**
             * Vector
             * @description The vector embedding extracted from the video's content.
             */
            vector: number[];
        };
        /**
         * EmbeddingIngestResponse
         * @description Simple acknowledgement returned after receiving an embedding.
         */
        EmbeddingIngestResponse: {
            /**
             * Videoid
             * Format: uuid
             */
            videoId: string;
            /** Status */
            status: string;
            /** Message */
            message?: string | null;
        };
        /**
         * FlagCreateRequest
         * @description Payload viewers submit when flagging content.
         */
        FlagCreateRequest: {
            contentType: components["schemas"]["ContentTypeEnum"];
            /**
             * Contentid
             * Format: uuid
             */
            contentId: string;
            reasonCode: components["schemas"]["FlagReasonCodeEnum"];
            /**
             * Reasontext
             * @description Optional free-form context supplied by the reporter.
             */
            reasonText?: string | null;
        };
        /**
         * FlagReasonCodeEnum
         * @description Standardized reasons a user can provide when flagging content.
         * @enum {string}
         */
        FlagReasonCodeEnum: "spam" | "inappropriate" | "harassment" | "copyright" | "other";
        /**
         * FlagResponse
         * @description Alias used in API responses.
         */
        FlagResponse: {
            contentType: components["schemas"]["ContentTypeEnum"];
            /**
             * Contentid
             * Format: uuid
             */
            contentId: string;
            reasonCode: components["schemas"]["FlagReasonCodeEnum"];
            /**
             * Reasontext
             * @description Optional free-form context supplied by the reporter.
             */
            reasonText?: string | null;
            /**
             * Flagid
             * Format: uuid
             */
            flagId?: string;
            /**
             * Userid
             * Format: uuid
             */
            userId: string;
            /**
             * Createdat
             * Format: date-time
             */
            createdAt: string;
            /**
             * Updatedat
             * Format: date-time
             */
            updatedAt: string;
            /** @default open */
            status: components["schemas"]["FlagStatusEnum"];
            /** Moderatorid */
            moderatorId?: string | null;
            /** Moderatornotes */
            moderatorNotes?: string | null;
            /** Resolvedat */
            resolvedAt?: string | null;
        };
        /**
         * FlagStatusEnum
         * @description Lifecycle states for the moderation flag itself.
         * @enum {string}
         */
        FlagStatusEnum: "open" | "under_review" | "approved" | "rejected";
        /**
         * FlagUpdateRequest
         * @description Payload moderators send when changing a flag's status.
         */
        FlagUpdateRequest: {
            status: components["schemas"]["FlagStatusEnum"];
            /** Moderatornotes */
            moderatorNotes?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** PaginatedResponse */
        PaginatedResponse: {
            /** Data */
            data: unknown[];
            pagination: components["schemas"]["Pagination"];
        };
        /** PaginatedResponse[FlagResponse] */
        PaginatedResponse_FlagResponse_: {
            /** Data */
            data: components["schemas"]["FlagResponse"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** PaginatedResponse[VideoSummary] */
        PaginatedResponse_VideoSummary_: {
            /** Data */
            data: components["schemas"]["VideoSummary"][];
            pagination: components["schemas"]["Pagination"];
        };
        /** Pagination */
        Pagination: {
            /** Currentpage */
            currentPage: number;
            /** Pagesize */
            pageSize: number;
            /** Totalitems */
            totalItems: number;
            /** Totalpages */
            totalPages: number;
        };
        /** RatingCreateOrUpdateRequest */
        RatingCreateOrUpdateRequest: {
            /**
             * Rating
             * @description Rating value 1-5
             */
            rating: number;
        };
        /** RatingResponse */
        RatingResponse: {
            /**
             * Rating
             * @description Rating value 1-5
             */
            rating: number;
            /**
             * Videoid
             * Format: uuid
             */
            videoid: string;
            /**
             * Userid
             * Format: uuid
             */
            userid: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
        };
        /**
         * RecommendationItem
         * @description Lightweight representation of a recommended video for list endpoints.
         */
        RecommendationItem: {
            /**
             * Videoid
             * Format: uuid
             */
            videoId: string;
            /** Title */
            title: string;
            /** Thumbnailurl */
            thumbnailUrl?: string | null;
            /**
             * Score
             * @description Relevance score where 1 is most relevant.
             */
            score?: number | null;
        };
        /** TagSuggestion */
        TagSuggestion: {
            /** Tag */
            tag: string;
        };
        /** User */
        User: {
            /** Firstname */
            firstName: string;
            /** Lastname */
            lastName: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Userid
             * Format: uuid
             */
            userId: string;
            /**
             * Createddate
             * Format: date-time
             */
            createdDate?: string;
            /**
             * Accountstatus
             * @default active
             */
            accountStatus: string;
            /** Lastlogindate */
            lastLoginDate?: string | null;
            /**
             * Roles
             * @default []
             */
            roles: string[];
        };
        /** UserCreateRequest */
        UserCreateRequest: {
            /** Firstname */
            firstName: string;
            /** Lastname */
            lastName: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
        };
        /** UserCreateResponse */
        UserCreateResponse: {
            /** Firstname */
            firstName: string;
            /** Lastname */
            lastName: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Userid
             * Format: uuid
             */
            userId: string;
        };
        /** UserLoginRequest */
        UserLoginRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
        };
        /** UserLoginResponse */
        UserLoginResponse: {
            /** Token */
            token: string;
            user: components["schemas"]["User"];
        };
        /** UserProfileUpdateRequest */
        UserProfileUpdateRequest: {
            /** Firstname */
            firstName?: string | null;
            /** Lastname */
            lastName?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VideoDetailResponse
         * @description Response model returned when fetching full video details.
         */
        VideoDetailResponse: {
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Tags */
            tags?: string[];
            /**
             * Videoid
             * Format: uuid
             */
            videoId?: string;
            /**
             * Userid
             * Format: uuid
             */
            userId: string;
            /**
             * Submittedat
             * Format: date-time
             */
            submittedAt: string;
            /** Thumbnailurl */
            thumbnailUrl?: string | null;
            /** Location */
            location: string;
            /** Location Type */
            location_type: number;
            /** Content Features */
            content_features?: number[] | null;
            /** Content Rating */
            content_rating?: string | null;
            /** Category */
            category?: string | null;
            /** Language */
            language?: string | null;
            /** Youtubevideoid */
            youtubeVideoId?: string | null;
            /** Updatedat */
            updatedAt?: string | null;
            /** @default PENDING */
            status: components["schemas"]["VideoStatusEnum"];
            /**
             * Viewcount
             * @default 0
             */
            viewCount: number;
            /** Averagerating */
            averageRating?: number | null;
            /**
             * Totalratingscount
             * @default 0
             */
            totalRatingsCount: number;
            /**
             * Is Deleted
             * @default false
             */
            is_deleted: boolean;
            /** Deleted At */
            deleted_at?: string | null;
        };
        /**
         * VideoRatingRequest
         * @description Client payload for submitting a rating (1-5).
         */
        VideoRatingRequest: {
            /** Rating */
            rating: number;
        };
        /**
         * VideoRatingSummary
         * @description Aggregated rating stats for a video.
         */
        VideoRatingSummary: {
            /**
             * Videoid
             * Format: uuid
             */
            videoId: string;
            /** Averagerating */
            averageRating: number;
            /** Ratingcount */
            ratingCount: number;
        };
        /**
         * VideoStatusEnum
         * @description Possible processing states for a submitted video.
         * @enum {string}
         */
        VideoStatusEnum: "PENDING" | "PROCESSING" | "READY" | "ERROR";
        /**
         * VideoStatusResponse
         * @description Response model that surfaces only the processing status.
         */
        VideoStatusResponse: {
            /**
             * Videoid
             * Format: uuid
             */
            videoId: string;
            status: components["schemas"]["VideoStatusEnum"];
        };
        /**
         * VideoSubmitRequest
         * @description Payload accepted by the *submit video* endpoint.
         */
        VideoSubmitRequest: {
            /**
             * Youtubeurl
             * Format: uri
             */
            youtubeUrl: string;
        };
        /**
         * VideoSummary
         * @description Smaller representation used in paginated lists (e.g., latest videos).
         */
        VideoSummary: {
            /**
             * Videoid
             * Format: uuid
             */
            videoId: string;
            /** Title */
            title: string;
            /** Thumbnailurl */
            thumbnailUrl?: string | null;
            /**
             * Userid
             * Format: uuid
             */
            userId: string;
            /**
             * Submittedat
             * Format: date-time
             */
            submittedAt: string;
            /** Content Rating */
            content_rating?: string | null;
            /** Category */
            category?: string | null;
            /**
             * Viewcount
             * @default 0
             */
            viewCount: number;
            /** Averagerating */
            averageRating?: number | null;
        };
        /**
         * VideoUpdateRequest
         * @description Payload for partial updates to a video owned by the caller or a moderator.
         */
        VideoUpdateRequest: {
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /** Tags */
            tags?: string[] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    register_user_api_v1_users_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserCreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_for_access_token_api_v1_users_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLoginRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLoginResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_users_me_api_v1_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    update_users_me_api_v1_users_me_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserProfileUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_video_api_v1_videos_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VideoSubmitRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoDetailResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_video_status_api_v1_videos_id__video_id_path__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                video_id_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoStatusResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_video_details_api_v1_videos_id__video_id_path__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                video_id_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoDetailResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_video_api_v1_videos_id__video_id_path__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                video_id_path: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VideoUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoDetailResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    record_view_api_v1_videos_id__video_id_path__view_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                video_id_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_latest_videos_api_v1_videos_latest_get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Items per page */
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_videos_by_tag_api_v1_videos_by_tag__tag_name__get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Items per page */
                pageSize?: number;
            };
            header?: never;
            path: {
                tag_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_videos_by_uploader_api_v1_videos_by_uploader__uploader_id_path__get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Items per page */
                pageSize?: number;
            };
            header?: never;
            path: {
                uploader_id_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_rating_summary_endpoint_api_v1_videos_id__video_id_path__rating_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                video_id_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoRatingSummary"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_rating_api_v1_videos_id__video_id_path__rating_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                video_id_path: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VideoRatingRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_related_videos_for_video_api_v1_videos_id__video_id_path__related_get: {
        parameters: {
            query?: {
                /** @description Max number of related videos */
                limit?: number;
            };
            header?: never;
            path: {
                video_id_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecommendationItem"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_videos_api_v1_search_videos_get: {
        parameters: {
            query: {
                /** @description Search query term */
                query: string;
                /** @description Page number */
                page?: number;
                /** @description Items per page */
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    suggest_video_tags_api_v1_search_tags_suggest_get: {
        parameters: {
            query: {
                /** @description Partial tag to search for */
                query: string;
                /** @description Maximum number of suggestions */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagSuggestion"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_comments_video_api_v1_videos__video_id_path__comments_get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Items per page */
                pageSize?: number;
            };
            header?: never;
            path: {
                video_id_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_comment_to_video_api_v1_videos__video_id_path__comments_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                video_id_path: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_comments_user_api_v1_users__user_id_path__comments_get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Items per page */
                pageSize?: number;
            };
            header?: never;
            path: {
                user_id_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_rating_summary_video_api_v1_videos__video_id_path__ratings_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                video_id_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AggregateRatingResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_rating_video_api_v1_videos__video_id_path__ratings_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                video_id_path: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RatingCreateOrUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RatingResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_for_you_feed_api_v1_recommendations_foryou_get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Items per page */
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_VideoSummary_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ingest_embedding_api_v1_reco_ingest_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmbeddingIngestRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmbeddingIngestResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_flag_api_v1_flags_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FlagCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlagResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_all_flags_api_v1_moderation_flags_get: {
        parameters: {
            query?: {
                /** @description Filter by flag status */
                status?: components["schemas"]["FlagStatusEnum"] | null;
                /** @description Page number */
                page?: number;
                /** @description Items per page */
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_FlagResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_flag_details_api_v1_moderation_flags__flag_id_path__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                flag_id_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlagResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    act_on_flag_api_v1_moderation_flags__flag_id_path__action_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                flag_id_path: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FlagUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlagResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_users_endpoint_api_v1_moderation_users_get: {
        parameters: {
            query?: {
                /** @description Search text */
                q?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_moderator_endpoint_api_v1_moderation_users__user_id_path__assign_moderator_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    revoke_moderator_endpoint_api_v1_moderation_users__user_id_path__revoke_moderator_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    restore_video_endpoint_api_v1_moderation_videos__video_id_path__restore_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                video_id_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentRestoreResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    restore_comment_endpoint_api_v1_moderation_comments__comment_id_path__restore_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                comment_id_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentRestoreResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
